@model PlusCP.Models.Home
@{
    ViewBag.Title = "Index";
    Layout = null;

}
<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>@ViewBag.Title</title>
    <link href="~/Content/css/message.css" rel="stylesheet" />



    <!-- Summernote -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.20/summernote-lite.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.20/summernote-lite.min.js"></script>
</head>
<body>
    <style>

       

        /* Toggle Switch Style */
        .switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }

            .switch input {
                opacity: 0;
                width: 0;
                height: 0;
            }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: 0.3s;
            border-radius: 34px;
        }

            .slider:before {
                position: absolute;
                content: "";
                height: 18px;
                width: 18px;
                left: 3px;
                bottom: 3px;
                background-color: white;
                transition: 0.3s;
                border-radius: 50%;
            }

        input:checked + .slider {
            background-color: #003B59; /* Your theme color */
        }

            input:checked + .slider:before {
                transform: translateX(26px);
            }

        .slider.round {
            border-radius: 34px;
        }




        .card {
            border-radius: 12px;
            border: 1px solid #e0e0e0;
            transition: all 0.3s ease-in-out;
        }

            .card:hover {
                transform: translateY(-2px);
                box-shadow: 0px 6px 18px rgba(0, 0, 0, 0.08);
            }

        .card-header {
            border-bottom: 1px solid #e0e0e0;
            font-weight: 600;
            background-color: #f9f9f9;
        }

        textarea.form-control {
            resize: vertical;
        }

        .toggle-password {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #888;
        }

            .toggle-password:hover {
                color: #333;
            }

        .toggle-password {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            color: #888;
        }

            .toggle-password:hover {
                color: #333;
            }

        .mb-3 {
            margin-bottom: 15px; /* Adjust as needed */
        }

        .position-relative {
            position: relative;
        }

        .toggle-password {
            position: absolute;
            top: 50%;
            right: 10px;
            transform: translateY(-50%);
            cursor: pointer;
            color: #6c757d;
        }

            .toggle-password i {
                font-size: 16px;
            }

        /* Card Styling */
        .api-settings-card {
            background: #fff;
            border-radius: 12px;
            border: 1px solid #e0e0e0;
            box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease-in-out;
            max-width: 100%;
        }

            .api-settings-card:hover {
                transform: translateY(-3px);
                box-shadow: 0px 6px 16px rgba(0, 0, 0, 0.1);
            }

        .api-settings-card {
            border: 1px solid #ddd;
            border-radius: 10px;
            background: #fff;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            padding: 20px;
        }

            .api-settings-card .box-header {
                display: flex;
                align-items: center;
                background: #f8f9fa;
                border-bottom: 1px solid #e1e1e1;
                border-top-left-radius: 10px;
                border-top-right-radius: 10px;
                margin: -20px -20px 15px -20px;
                padding: 12px 20px;
            }

            .api-settings-card label {
                font-weight: 600;
                margin-bottom: 5px;
            }

            /* Make all inputs consistent height */
            .api-settings-card .form-control,
            .api-settings-card .input-group .form-control {
                height: 36px;
                font-size: 14px;
                border-radius: 6px;
            }

        /* Input group consistency */
        .input-group-addon {
            background-color: #f8f9fa;
            border: 1px solid #ccc;
            border-left: 0;
            display: flex;
            align-items: center;
            padding: 0 10px;
        }

            /* Checkbox alignment fix */
            .input-group-addon input[type="checkbox"] {
                margin: 0;
                transform: scale(1.2);
                cursor: pointer;
            }

        /* Button styling */
        #btnCheck {
            border-radius: 50px;
            font-size: 14px;
            font-weight: 600;
            padding: 8px 20px;
            box-shadow: 0px 3px 6px rgba(0,0,0,0.1);
            transition: all 0.3s ease-in-out;
        }

            #btnCheck:hover {
                transform: translateY(-2px);
                box-shadow: 0px 5px 10px rgba(0,0,0,0.15);
            }

        .Red {
            color: red;
        }

        .box-body {
            padding: 20px;
        }

        .ModalHeaderColor {
            background-color: #D6EFE8;
            color: #003B59
        }

        .ModalLabelColor {
            color: #003B59;
        }

        .btn-hover-save {
            background-color: #003B59; /* Default background color */
            border-color: #003B59; /* Default border color */
            color: #fff; /* Default text color */
        }

            .btn-hover-save:hover {
                background-color: transparent; /* Make background transparent on hover */
                border-color: #003B59; /* Dark border color on hover */
                color: #003B59; /* Dark font color on hover */
            }

        .btnClose {
            background-color: whitesmoke; /* Make background transparent on hover */
            color: #003B59; /* Dark font color on hover */
            transform: scale(1.05); /* Slightly scale up the card on hover */
        }

            .btnClose:hover {
                border: 1px solid #003B59; /* Thicker border with dark color on hover */
                color: #003B59; /* Dark font color on hover */
                transform: scale(1.05); /* Slightly scale up the card on hover */
                -webkit-box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* More pronounced shadow on hover */
                box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* More pronounced shadow on hover */
            }
        .btn-hover-save, .btnClose {
            transition: all 0.2s ease-in-out;
        }

            .btn-hover-save:hover, .btnClose:hover {
                transform: scale(1.05);
            }

    </style>

    <div class="container-fluid" style="background-color: white; min-height: 100vh; background: linear-gradient(to Bottom, white, #D6EFE8);">
        <div class="d-flex flex-column align-items-center justify-content-start" style="padding: 40px 5%;">

            <!-- API Settings Card -->
            <div class="row justify-content-center mb-4 w-100">
                <div class="col-xl-12 col-lg-12 col-md-11 col-sm-12">
                    <div class="api-settings-card shadow-lg p-4 rounded w-100" style="max-width: 900px; margin:auto;">
                        <div class="box-header d-flex align-items-center mb-3">
                            <span class="fa fa-cogs fa-lg ModalLabelColor"></span>
                            <h4 class="box-title ModalLabelColor ml-2 mb-0"><strong>API Settings</strong></h4>
                        </div>

                        <!-- API URL -->
                        <div class="form-group">
                            <label>API URL:</label>
                            <input type="hidden" id="ApiUrlValue" value="@ViewBag.ApiUrl" />
                            @Html.EditorFor(model => model.ApiUrl, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter API URL" } })
                        </div>

                        <!-- Username + Password -->
                        <div class="form-group">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label>Username:</label>
                                    <input type="hidden" id="UsernameValue" value="@ViewBag.username" />
                                    @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Username" } })
                                </div>
                                <div class="col-sm-1"></div>
                                <div class="col-sm-7">
                                    <label>Password:</label>
                                    <div class="position-relative">
                                        <input type="hidden" id="ApiPasswordValue" value="@ViewBag.ApiPassword" />
                                        @Html.PasswordFor(model => model.password, new { @class = "form-control pr-5", placeholder = "Enter Password", id = "password" })
                                        <span class="toggle-password" onclick="togglePassword('password', this)">
                                            <i class="glyphicon glyphicon-eye-open"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Token -->
                        <div class="form-group">
                            <label>Token:</label>
                            <div class="position-relative">
                                <input type="hidden" id="ApiTokenValue" value="@ViewBag.ApiToken" />
                                @Html.PasswordFor(model => model.token, new { @class = "form-control pr-5", placeholder = "Enter Token", id = "token" })
                                <span class="toggle-password" onclick="togglePassword('token', this)">
                                    <i class="glyphicon glyphicon-eye-open"></i>
                                </span>
                            </div>
                        </div>

                        <!-- Button -->
                        <div class="text-center mt-3">
                            <button id="btnCheck"
                                    class="btn btn-hover-save shadow-sm d-inline-flex align-items-center justify-content-center"
                                    type="button"
                                    style="border-radius:8px; height:40px; font-size:14px; font-weight:bold; padding:0 18px;">
                                <i class="fa fa-plug mr-2"></i> Test Connection
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <br />

            <!-- Other Settings Card -->
            <div class="row justify-content-center mb-4 w-100">
                <div class="col-xl-12 col-lg-12 col-md-11 col-sm-12">
                    <div class="api-settings-card shadow-lg p-4 rounded w-100" style="max-width: 900px; margin:auto;">
                        <div class="box-header d-flex align-items-center mb-3">
                            <span class="fa fa-sliders fa-lg ModalLabelColor"></span>
                            <h4 class="box-title ModalLabelColor ml-2 mb-0"><strong>Other Settings</strong></h4>
                        </div>

                        <div class="form-group">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label>Set Hours:</label>
                                    <input type="hidden" id="hoursValue" value="@ViewBag.HoursValue" />
                                    @Html.EditorFor(model => model.Hours, new { htmlAttributes = new { @class = "form-control", placeholder = "Hours" } })
                                </div>
                                <div class="col-sm-1"></div>
                                <div class="col-sm-7">
                                    <label>Set CC Email:</label>
                                    <input type="hidden" id="ccEmail" value="@ViewBag.CCEmailAddress" />
                                    @Html.EditorFor(model => model.CCEmail, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter CC Email" } })
                                </div>
                            </div>
                        </div>

                        <div class="form-group mt-3">
                            <label>City (Time Zone):</label>
                            <input type="hidden" id="TimeZone" value="@ViewBag.TimeZone" />
                            @Html.DropDownList("ddlTimeZone", null, new { id = "ddlTimeZone", @name = "ddlTimeZone", @class = "form-control", @onkeydown = "GoOnEnter()" })
                        </div>

                        <div class="card mt-3">
                            <div class="card-header">
                                <h6 class="box-title ModalLabelColor ml-2 mb-0" style="margin-left:8px;">Line Communication Permissions</h6>
                            </div>
                            <div class="card-body">
                                <div class="form-group">
                                    <div class="row align-items-center">
                                        <!-- Update Qty Toggle -->
                                        <div class="col-sm-6 d-flex align-items-center mb-2">
                                            <label class="mb-0 mr-2"><strong>Allow Quantity Edits</strong></label>
                                            <i class="bi bi-info-circle text-primary ms-1"
                                               tabindex="0"
                                               role="button"
                                               data-bs-toggle="popover"
                                               data-bs-trigger="focus"
                                               title="Enable this option if users should be able to edit quantities."
                                               data-bs-content="">
                                            </i>
                                            <label class="switch mb-0 ms-auto">
                                                <input type="checkbox" id="UpdateQtyToggle" @(ViewBag.IsQtyUpdate == true ? "checked" : "") />
                                                <span class="slider round"></span>
                                            </label>
                                        </div>

                                        <!-- Update Price Toggle -->
                                        <div class="col-sm-6 d-flex align-items-center mb-2">
                                            <label class="mb-0 mr-2"><strong>Allow Price Edits</strong></label>
                                            <i class="bi bi-info-circle text-primary ms-1"
                                               tabindex="0"
                                               role="button"
                                               data-bs-toggle="popover"
                                               data-bs-trigger="focus"
                                               title="Enable this option if users should be able to edit prices."
                                               data-bs-content="">
                                            </i>
                                            <label class="switch mb-0 ms-auto">
                                                <input type="checkbox" id="UpdatePriceToggle" @(ViewBag.IsPriceUpdate == true ? "checked" : "") />
                                                <span class="slider round"></span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>



                    </div>
                </div>
            </div>

            <br />

            <!-- Terms and Conditions Card -->
            <div class="row justify-content-center mb-4 w-100">
                <div class="col-xl-12 col-lg-12 col-md-11 col-sm-12">
                    <div class="api-settings-card shadow-lg p-4 rounded w-100" style="max-width: 900px; margin:auto;">
                        <div class="box-header d-flex align-items-center mb-3">
                            <span class="fa fa-file-text fa-lg ModalLabelColor"></span>
                            <h4 class="box-title ModalLabelColor ml-2 mb-0"><strong>Terms & Conditions</strong></h4>
                        </div>
                        <textarea class="form-control" id="TermsCondition" rows="8">@ViewBag.TermsCondition</textarea>
                    </div>
                </div>
            </div>

            <br />
          
            <!-- Buttons Row -->
            <div class="row justify-content-center mb-4 mt-3">
                <div class="col-xl-12 col-lg-12 col-md-11 col-sm-12 text-center">
                    <button id="btnCancel" class="btn btnClose mx-2 d-inline-flex align-items-center justify-content-center"
                            type="button"
                            style="border-radius:8px; width:100px; height:40px; font-size:14px; font-weight:bold; margin-right:6px">
                        <i class="fa fa-times-circle mr-2"></i> Cancel
                    </button>
                    <button id="btnUser" class="btn btn-hover-save mx-2 d-inline-flex align-items-center justify-content-center"
                            type="button"
                            style="border-radius:8px; width:100px; height:40px; font-size:14px; font-weight:bold;">
                        <i class="fa fa-save mr-2"></i> Save
                    </button>
                </div>
            </div>

            <!-- Message -->
            @*<div class="row justify-content-center">
            <div class="col-auto">
                <div id="lblMsg" class="optionMsg mt-2 text-center"></div>
            </div>
        </div>*@

        </div>
    </div>


    <script src="~/Scripts/Message.js"></script>

    <script src="~/Scripts/TextFormatter.js"></script>









    <script>
        function togglePassword(fieldId, el) {
            var field = document.getElementById(fieldId);
            var icon = el.querySelector('i');

            if (field.type === "password") {
                field.type = "text";
                icon.classList.remove("glyphicon-eye-open");
                icon.classList.add("glyphicon-eye-close");
            } else {
                field.type = "password";
                icon.classList.remove("glyphicon-eye-close");
                icon.classList.add("glyphicon-eye-open");
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'))
            popoverTriggerList.map(function (popoverTriggerEl) {
                return new bootstrap.Popover(popoverTriggerEl)
            })
        });

        function initTermsEditor() {
            var $el = $('#TermsCondition');
            if ($el.length) {
                // Agar pehle se init hua ho to reset kar do
                if ($el.next('.note-editor').length) {
                    $el.summernote('destroy');
                }

                $el.summernote({
                    placeholder: 'Write terms and conditions here...',
                    height: 350,
                    toolbar: [
                        ['style', ['bold', 'italic', 'underline', 'clear']],
                        ['para', ['ul', 'ol', 'paragraph']],
                        ['font', ['strikethrough', 'superscript', 'subscript']],
                        ['insert', ['link']],
                        ['view', ['undo', 'redo']]
                    ]
                });
            }
        }

        // jab page first time load ho
        $(document).ready(function () {
            initTermsEditor();
        });




        //var passwordInput = document.getElementById('password');
        //var showPasswordCheckbox = document.getElementById('showPasswordCheckbox');

        //showPasswordCheckbox.addEventListener('change', function () {
        //    if (this.checked) {
        //        passwordInput.type = 'text';
        //    } else {
        //        passwordInput.type = 'password';
        //    }
        //});
        //var TokenInput = document.getElementById('token');
        //var showTokenCheckbox = document.getElementById('showTokenCheckbox');

        //showTokenCheckbox.addEventListener('change', function () {
        //    if (this.checked) {
        //        TokenInput.type = 'text';
        //    } else {
        //        TokenInput.type = 'password';
        //    }
        //});

        //var SQLPasswordInput = document.getElementById('SQLpassword');
        //var showPasswordCheckbox = document.getElementById('showSQLPasswordCheckbox');

        //showPasswordCheckbox.addEventListener('change', function () {
        //    if (this.checked) {
        //        SQLPasswordInput.type = 'text';
        //    } else {
        //        SQLPasswordInput.type = 'password';
        //    }
        //});

        loadData();
        function loadData() {
            $.get('/Setting/UpdateSetting', function (html) {
                $("#divTerms").html(html);
                initTermsEditor(); // <- ab yahan dobara init hoga
            });
            var conType = $("#ddlConn :selected").text();

            var CCEmail = $("#ccEmail").val(); debugger
            var hoursValue = $("#hoursValue").val();
            var ApiUrlValue = $("#ApiUrlValue").val();
            var UsernameValue = $("#UsernameValue").val();
            var passwordValue = $("#ApiPasswordValue").val();
            var tokenValue = $("#ApiTokenValue").val();

            var SQlConn = $("#SQlConnval").val();
            var SQLUsername = $("#SQLUsernameval").val();
            var SQLpassword = $("#SQLpasswordval").val();
            //var TermsCondition = $('#TermsCondition').summernote('code');

            // Set the value to the input field
            $("#CCEmail").val(CCEmail);
            $("#Hours").val(hoursValue);
            $("#ApiUrl").val(ApiUrlValue);
            $("#Username").val(UsernameValue);
            $("#password").val(passwordValue);
            $("#token").val(tokenValue);

            $("#SQlConn").val(SQlConn);
            $("#SQLUsername").val(SQLUsername);
            $("#SQLpassword").val(SQLpassword);
            /*  $("#TermsCondition").val(TermsCondition);*/


            if (conType.toUpperCase() == 'TEST') {

                $("#ApiUrl").val('');
                $("#Username").val('');
                $("#password").val('');
                $("#token").val('');

                $('#ApiUrl').prop('disabled', true);
                $('#Username').prop('disabled', true);
                $('#password').prop('disabled', true);
                $('#token').prop('disabled', true);
                $('#btnCheck').prop('disabled', true);
            }
            else {
                $('#ApiUrl').prop('disabled', false);
                $('#Username').prop('disabled', false);
                $('#password').prop('disabled', false);
                $('#token').prop('disabled', false);
                $('#btnCheck').prop('disabled', false);
            }

        }

        $("#btnUser").click(function () {
            debugger
            $('#lblMsg').empty();

            var conType = $("#ddlConn :selected").text();
            var Hours = $('#Hours').val();
            var ApiUrl = $("#ApiUrl").val();
            var Username = $("#Username").val();
            var password = $("#password").val();
            var token = $("#token").val();
            var SQlConn = $("#SQlConn").val();
            var SQLUsername = $("#SQLUsername").val();
            var SQLpassword = $("#SQLpassword").val();
            var TimeZone = $("#ddlTimeZone :selected").val();
            var CCEmail = $("#CCEmail").val();
            var TermsCondition = encodeURIComponent($('#TermsCondition').summernote('code'));
            let updateQty = document.getElementById("UpdateQtyToggle").checked;
            let updatePrice = document.getElementById("UpdatePriceToggle").checked;


            $.ajax({
                cache: false,
                type: 'POST',
                url: '/Setting/UpdateSetting',
                data:
                {
                    conType: conType,
                    Hours: Hours,
                    ApiUrl: ApiUrl,
                    Username: Username,
                    password: password,
                    token: token,
                    SQlConn: SQlConn,
                    SQLUsername: SQLUsername,
                    SQLpassword: SQLpassword,
                    TimeZone: TimeZone,
                    CCEmail: CCEmail,
                    TermsCondition: TermsCondition,
                    IsUpdateQty: updateQty,
                    IsUpdatePrice: updatePrice
                },

                datatype: JSON,
                success: function (data) {


                    $('#ddlConn').blur();
                    $('#IPMnu').empty();
                    LoadMenus();
                    //OpenPage('\\Dashboard\\Index');
                    location.reload(true);


                },
                onerror: function (r) { r },
                failure: function (r) { r }

            });
            //loadUserData(_userId);

        });

        $("#btnCancel").click(function () {
            $('#ddlConn').blur();
            $('#IPMnu').empty();
            LoadMenus();
            //OpenPage('\\Dashboard\\Index');
        });
        function changeColor(id, newColor) {
            $("#" + id).css("color", newColor);
        }

        $("#btnCheck").click(function () {
            $('#lblMsg').empty();
            var conType = $("#ddlConn :selected").text();
            var ApiUrl = $("#ApiUrl").val();
            var Username = $("#Username").val();
            var password = $("#password").val();
            var token = $("#token").val();

            $.ajax({
                cache: false,
                type: 'GET',
                url: '/Setting/CheckAPI',
                data:
                {
                    conType: conType,
                    ApiUrl: ApiUrl,
                    Username: Username,
                    password: password,
                    token: token
                },

                datatype: JSON,
                success: function (data) {

                    if (data === 'OK') {
                        MsgToast("Success!", "Test connection succeeded !", "success");
                    }
                    else {
                        MsgToast("Oops!", "An error occurred!", "error");

                    }

                },
                onerror: function (r) { r },
                failure: function (r) { r }

            });
            //loadUserData(_userId);

        });


        $("#btnSQLCheck").click(function () {
            $('#lblMsg').empty();
            var conType = $("#ddlConn :selected").text();
            var SQlConn = $("#SQlConn").val();
            var SQLUsername = $("#SQLUsername").val();
            var SQLpassword = $("#SQLpassword").val();


            $.ajax({
                cache: false,
                type: 'GET',
                url: '/Setting/CheckSQLConnction',
                data:
                {
                    conType: conType,
                    SQlConn: SQlConn,
                    SQLUsername: SQLUsername,
                    SQLpassword: SQLpassword

                },

                datatype: JSON,
                success: function (data) {

                    if (data === 'OK') {
                        MsgToast("Success!", "Test connection succeeded !", "success");
                    }
                    else {
                        MsgToast("Oops!", "An error occurred!", "error");

                    }

                },
                onerror: function (r) { r },
                failure: function (r) { r }

            });
            //loadUserData(_userId);

        });


        $("#ddlConn").change(function () {
            var conType = $("#ddlConn :selected").text();
            $.ajax({
                cache: false,
                type: 'GET',
                url: '/Setting/GetConnectionData',
                data:
                {
                    conType: conType
                },

                datatype: JSON,
                success: function (data) {
                    //string decodedTerms = HttpUtility.UrlDecode(TermsCondition);
                    if (conType.toUpperCase() != 'TEST') {
                        $("#ApiUrl").val(data.lstConnectionData[1]["URL"]);
                        $("#Username").val(data.lstConnectionData[1]["UserName"]);
                        $("#password").val(data.lstConnectionData[1]["Password"]);
                        $("#token").val(data.lstConnectionData[1]["Token"]);

                        $('#ApiUrl').prop('disabled', false);
                        $('#Username').prop('disabled', false);
                        $('#password').prop('disabled', false);
                        $('#token').prop('disabled', false);
                        $('#btnCheck').prop('disabled', false);
                    }

                    else {
                        $("#ApiUrl").val('');
                        $("#Username").val('');
                        $("#password").val('');
                        $("#token").val('');

                        $('#ApiUrl').prop('disabled', true);
                        $('#Username').prop('disabled', true);
                        $('#password').prop('disabled', true);
                        $('#token').prop('disabled', true);
                        $('#btnCheck').prop('disabled', true);

                    }
                    $("#SQlConn").val(data.lstConnectionData[0]["ConValue"]);
                    $("#SQLUsername").val(data.lstConnectionData[0]["UserName"]);
                    $("#SQLpassword").val(data.lstConnectionData[0]["Password"]);

                },
                onerror: function (r) { r },
                failure: function (r) { r }

            });

        });

        function MsgToast(msg, title, type) {

            toastr.options = {
                closeButton: true,
                debug: false,
                newestOnTop: false,
                progressBar: true,
                positionClass: 'toast-top-right',
                preventDuplicates: true,
                onclick: null
            };



            var $toast = toastr[type](title, msg); // Wire up an event handler to a button in the toast, if it exists
            $toastlast = $toast;

            if (typeof $toast === 'undefined') {
                return;
            }


        }
    </script>
</body>
</html>